// Generated by CoffeeScript 1.8.0
(function() {
  var Context, async, colors, inspect, promise, _ref;

  colors = require("colors");

  inspect = require("util").inspect;

  _ref = require("./async-helpers"), promise = _ref.promise, async = _ref.async;

  Context = (function() {
    Context.pending = 0;

    Context.root = null;

    Context.ready = false;

    Context.start = function() {
      return this.pending++;
    };

    Context.finish = function() {
      this.pending--;
      if (this.ready && this.pending === 0) {
        return this.resolve();
      }
    };

    Context.describe = function(description, fn) {
      return promise(function(resolve) {
        Context.resolve = resolve;
        fn(new Context(description));
        return Context.ready = true;
      });
    };

    function Context(description, parent) {
      var _ref1;
      this.description = description;
      this.parent = parent;
      if (Context.root == null) {
        Context.root = this;
      }
      if ((_ref1 = this.parent) != null) {
        _ref1.kids.push(this);
      }
      this.kids = [];
    }

    Context.prototype.describe = function(description, fn) {
      var context;
      context = new Context(description, this);
      return fn(context);
    };

    Context.prototype.test = function(description, fn) {
      var context, error;
      context = new Context(description, this);
      Context.pending++;
      if (fn.constructor.name === "GeneratorFunction") {
        fn = async(fn);
        return fn(context).then(function() {
          return context.pass();
        })["catch"](function(error) {
          return context.fail(error);
        });
      } else {
        try {
          fn();
          return context.pass();
        } catch (_error) {
          error = _error;
          return context.fail(error);
        }
      }
    };

    Context.prototype.pass = function() {
      this.result = true;
      return Context.finish();
    };

    Context.prototype.fail = function(error) {
      this.result = true;
      this.error = error;
      return Context.finish();
    };

    Context.prototype.report = function() {
      var color, kid, _i, _len, _ref1, _results;
      console.log(this.result != null ? this.error != null ? ("" + this.description + " " + (inspect(this.error))).red : (color = (this.result ? "green" : "yellow"), this.description[color]) : this.description != null ? this.description.bold.green : void 0);
      _ref1 = this.kids;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        kid = _ref1[_i];
        _results.push(kid.report());
      }
      return _results;
    };

    return Context;

  })();

  module.exports = (function() {
    process.on("exit", function() {
      var _ref1;
      if (Context.pending > 0) {
        console.error("warning: " + Context.pending + " tests still pending");
      }
      return (_ref1 = Context.root) != null ? _ref1.report() : void 0;
    });
    return Context;
  })();

}).call(this);
