// Generated by CoffeeScript 1.8.0
(function() {
  var Context, async, call, colors, generator, lift, promise, _ref;

  colors = require("colors");

  _ref = require("when"), promise = _ref.promise, lift = _ref.lift;

  generator = require("when/generator");

  async = generator.lift;

  call = generator.call;

  Context = (function() {
    var finish, pending, resolve, start, wait;

    pending = 0;

    resolve = null;

    wait = function() {
      return promise(function(_resolve) {
        resolve = _resolve;
        if (!(pending > 0)) {
          return resolve();
        }
      });
    };

    start = function() {
      return ++pending;
    };

    finish = function() {
      if (--pending === 0) {
        return resolve();
      }
    };

    Context.describe = function(description, fn) {
      return call((function(_this) {
        return function*() {
          _this.root = new Context(description);
          fn(_this.root);
          (yield wait());
          return _this.root.report();
        };
      })(this));
    };

    function Context(description, parent) {
      var _ref1;
      this.description = description;
      this.parent = parent;
      if ((_ref1 = this.parent) != null) {
        _ref1.kids.push(this);
      }
      this.kids = [];
    }

    Context.prototype.describe = function(description, fn) {
      return fn(new Context(description, this));
    };

    Context.prototype.test = function(description, fn) {
      return (new Context(description, this)).run(fn);
    };

    Context.prototype.run = function(fn) {
      var error;
      if (fn != null) {
        if (fn.constructor.name === "GeneratorFunction") {
          return call((function(_this) {
            return function*() {
              var error;
              start();
              try {
                (yield (call(fn, _this)));
                if (_this.result == null) {
                  _this.pass();
                }
              } catch (_error) {
                error = _error;
                _this.fail(error);
              }
              return finish();
            };
          })(this));
        } else {
          try {
            fn(this);
            if (this.result == null) {
              return this.pass();
            }
          } catch (_error) {
            error = _error;
            return this.fail(error);
          }
        }
      } else {
        return context.fail();
      }
    };

    Context.prototype.pass = function() {
      return this.result = true;
    };

    Context.prototype.fail = function(error) {
      if ((error != null ? error.stack : void 0) != null) {
        console.error(error.stack);
      }
      this.result = false;
      return this.error = error;
    };

    Context.prototype.report = function(indent) {
      var kid, _i, _len, _ref1, _results;
      if (indent == null) {
        indent = "";
      }
      console.log(indent, this.result != null ? this.error != null ? this.description.red : this.result ? this.description.green : this.description.yellow : this.description.bold.green);
      _ref1 = this.kids;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        kid = _ref1[_i];
        _results.push(kid.report(indent + "  "));
      }
      return _results;
    };

    return Context;

  })();

  module.exports = Context;

}).call(this);
