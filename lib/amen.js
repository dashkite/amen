// Generated by CoffeeScript 1.7.1
(function() {
  var Context, assert, colors, inspect;

  assert = require("assert");

  colors = require("colors");

  inspect = require("util").inspect;

  Context = (function() {
    function Context(description, parent) {
      this.description = description;
      this.parent = parent;
      this.kids = [];
    }

    Context.prototype.push = function(description) {
      var context;
      context = new Context(description, this);
      this.kids.push(context);
      return context;
    };

    Context.prototype.pop = function() {
      return this.parent;
    };

    Context.prototype.describe = function(description, fn) {
      return fn(this.push(description));
    };

    Context.prototype.test = function(description, fn) {
      var context, error;
      context = this.push(description);
      try {
        context.start();
        if (fn.length > 0) {
          return (function() {
            return fn(context);
          })();
        } else {
          fn();
          return context.pass();
        }
      } catch (_error) {
        error = _error;
        return context.fail(error);
      }
    };

    Context.prototype.start = function() {
      return Context.pending++;
    };

    Context.prototype.finish = function() {
      return Context.pending--;
    };

    Context.prototype.pass = function(assert) {
      var error;
      try {
        if (typeof assert === "function") {
          assert();
        }
        this.result = true;
      } catch (_error) {
        error = _error;
        this.fail(error);
      }
      return this.finish();
    };

    Context.prototype.fail = function(error) {
      this.error = error;
      this.result = false;
      return this.finish();
    };

    Context.prototype.report = function() {
      var color;
      if (this.result != null) {
        if (this.error != null) {
          return console.log(("" + this.description + " " + (inspect(this.error))).red);
        } else {
          color = (this.result ? "green" : "yellow");
          return console.log(this.description[color]);
        }
      } else if (this.description != null) {
        return console.log(this.description.bold.green);
      }
    };

    Context.prototype.summarize = function() {
      var kid, _i, _len, _ref, _results;
      this.report();
      _ref = this.kids;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        kid = _ref[_i];
        _results.push(kid.summarize());
      }
      return _results;
    };

    return Context;

  })();

  module.exports = (function() {
    var root;
    process.on("exit", function() {
      return root.summarize();
    });
    return root = new Context();
  })();

}).call(this);
