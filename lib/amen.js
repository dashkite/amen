// Generated by CoffeeScript 1.8.0
(function() {
  var Context, call, colors, lift, promise, _ref;

  colors = require("colors");

  promise = require("when").promise;

  _ref = require("when/generator"), call = _ref.call, lift = _ref.lift;

  Context = (function() {
    Context.pending = 0;

    Context.describe = function(description, fn) {
      return call((function(_this) {
        return function*() {
          _this.root = new Context(description);
          (yield (promise(function(resolve) {
            _this.resolve = resolve;
            return fn(_this.root);
          })));
          return _this.report();
        };
      })(this));
    };

    Context.report = function() {
      return this.root.report();
    };

    Context.async = function(fn, context) {
      fn = lift(fn);
      return call((function(_this) {
        return function*() {
          _this.pending++;
          (yield fn(context));
          if (--_this.pending === 0) {
            return _this.resolve();
          }
        };
      })(this));
    };

    function Context(description, parent) {
      var _ref1;
      this.description = description;
      this.parent = parent;
      if ((_ref1 = this.parent) != null) {
        _ref1.kids.push(this);
      }
      this.kids = [];
    }

    Context.prototype.describe = function(description, fn) {
      return fn(new Context(description, this));
    };

    Context.prototype.test = function(description, fn) {
      var context, error;
      context = new Context(description, this);
      if (fn != null) {
        try {
          if (fn.constructor.name === "GeneratorFunction") {
            Context.async(fn, context);
          } else {
            fn(context);
          }
          return context.pass();
        } catch (_error) {
          error = _error;
          console.error(error.stack);
          return context.fail(error);
        }
      } else {
        return context.fail();
      }
    };

    Context.prototype.pass = function() {
      return this.result = true;
    };

    Context.prototype.fail = function(error) {
      this.result = false;
      return this.error = error;
    };

    Context.prototype.report = function(indent) {
      var color, kid, _i, _len, _ref1, _results;
      if (indent == null) {
        indent = "";
      }
      console.log(indent, this.result != null ? this.error != null ? ("" + this.description + " [" + this.error + "]").red : (color = (this.result ? "green" : "yellow"), this.description[color]) : this.description != null ? this.description.bold.green : void 0);
      _ref1 = this.kids;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        kid = _ref1[_i];
        _results.push(kid.report("" + indent + "  "));
      }
      return _results;
    };

    return Context;

  })();

  module.exports = Context;

}).call(this);
