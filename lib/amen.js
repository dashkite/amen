// Generated by CoffeeScript 1.8.0
(function() {
  var Context, assert, async, colors, empty, include, isPromise, isType, lift, promise, report, _ref;

  if (global.$p == null) {
    global.$p = function() {
      return console.log.apply(console, arguments);
    };
  }

  assert = require("assert");

  colors = require("colors");

  _ref = require("fairmont"), empty = _ref.empty, promise = _ref.promise, isPromise = _ref.isPromise, lift = _ref.lift, async = _ref.async, include = _ref.include, isType = _ref.isType;

  Context = {
    create: function(description, parent) {
      var context;
      context = {
        description: description,
        parent: parent,
        kids: [],
        root: parent.root
      };
      return include(context, {
        test: async(function*(description, f) {
          var child, error, g;
          parent = context;
          if (f != null) {
            g = async(f);
          }
          child = Context.create(description, parent);
          parent.kids.push(child);
          if (g != null) {
            child.start();
            try {
              (yield g(child));
              return child.pass();
            } catch (_error) {
              error = _error;
              return child.fail(error);
            }
          }
        }),
        describe: function() {
          return context.test.apply(context, arguments);
        },
        pass: function() {
          context.finish();
          return context.result = true;
        },
        fail: function(error) {
          context.finish();
          context.result = false;
          if (error != null) {
            context.error = error;
            if (!(isType(assert.AssertionError, error))) {
              return console.error(error.stack);
            }
          }
        },
        start: context.root.start,
        finish: context.root.finish
      });
    },
    describe: function(description, f) {
      return promise(function(resolve, reject) {
        var error, pending, root;
        try {
          pending = 0;
          root = {
            start: function() {
              return ++pending;
            },
            finish: function() {
              return setImmediate(function() {
                if (--pending === 0) {
                  resolve();
                  return report(root.context);
                }
              });
            }
          };
          root.context = Context.create(description, {
            root: root
          });
          return f(root.context);
        } catch (_error) {
          error = _error;
          console.error(error.stack);
          return report(root.context);
        }
      });
    },
    report: report = function(context, indent) {
      var description, error, kid, kids, parent, result, root, _i, _len, _results;
      if (indent == null) {
        indent = "";
      }
      description = context.description, result = context.result, error = context.error, parent = context.parent, root = context.root, kids = context.kids;
      console.log(indent, result != null ? result ? description.green : error != null ? ("" + description + " " + error).red : description.red : empty(kids) ? description.yellow : description.green);
      indent += "  ";
      _results = [];
      for (_i = 0, _len = kids.length; _i < _len; _i++) {
        kid = kids[_i];
        _results.push(report(kid, indent));
      }
      return _results;
    }
  };

  module.exports = Context;

}).call(this);
